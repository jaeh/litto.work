var D = document;
var M = Math;
var W = window;

var $ = function $(str) {
  var par = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : D;
  var isCl = str.indexOf('.') === 0;
  var isId = str.indexOf('#') === 0;

  if (isCl) {
    return par.getElementsByClassName(str.substr(1, str.length));
  } else if (isId) {
    return par.getElementById(str.substr(1, str.length));
  } else {
    return par.getElementsByTagName(str);
  }
}; // global dom elements


var draggableContainer = $('.draggables')[0];
var draggables = $('.drag');
var maxZIndex = draggables.length * 5; // global app state

var dragged = false;
var startPos = false;
var currentZIndex = 1; // loop over each item and call fn(item)

var forEach = function forEach(items, fn) {
  for (var i = 0; i < items.length; i++) {
    if (items.hasOwnProperty(i)) {
      fn(items[i]);
    }
  }
};

var cl = {
  has: function has(e, c) {
    return e.className && e.className.indexOf(c) > -1;
  },
  add: function add(e, c) {
    if (!cl.has(e, c)) {
      if (e.className) {
        c = e.className + ' ' + c;
      }

      e.className = c;
    }
  },
  rm: function rm(e, c) {
    if (cl.has(e, c)) {
      e.className = e.className.replace(c, '').trim();
    }
  },
  toggle: function toggle(e, c) {
    if (cl.has(e, c)) {
      cl.rm(e, c);
    } else {
      cl.add(e, c);
    }
  }
};

var on = function on(ele, listener, cb) {
  if (ele) {
    ele.addEventListener(listener, cb);
  }
}; // resize and reposition after load of images


var onload = function onload(par) {
  return function (e) {
    if (cl.has(e.target, 'bg')) {
      var tar = e.target;
      var width = tar.getBoundingClientRect().width;
      var height = tar.getBoundingClientRect().height;
      var left = 0;
      var top = 0; // resize if too wide

      var maxWidth = W.innerWidth * .7;

      if (width > maxWidth) {
        var widthPercent = width / maxWidth + .1;
        width /= widthPercent;
        height /= widthPercent;
      } // resize if too high


      var maxHeight = W.innerHeight * .7;

      if (height > maxHeight) {
        var heightPercent = height / maxHeight + .1;
        height /= heightPercent;
        width /= heightPercent;
      }

      var maxLeft = W.innerWidth - width;
      var maxTop = W.innerHeight - height;
      left = M.random() * maxLeft;
      top = M.random() * maxTop;
      left = "".concat(M.floor(percentFromPixels('Width', left)), "%");
      top = "".concat(M.floor(percentFromPixels('Height', top)), "%");
      par.style.left = left;
      par.style.top = top;
      par.style.transition = 'left 500ms, top 500ms';
    }
  };
};

forEach(draggables, function (draggable) {
  var ran = M.random();
  var pos = {
    left: '100%',
    top: '100%'
  };

  if (ran > 0.7) {
    pos.left = "-".concat(pos.left);
  } else if (ran < 0.3) {
    pos.top = "-".concat(pos.top);
  }

  draggable.style.left = pos.left;
  draggable.style.top = pos.top;
  var img = $('.bg', draggable)[0];
  on(img, 'load', onload(draggable));
});

var touchHandler = function touchHandler(event) {
  var touch = event.changedTouches[0];
  var simulatedEvent = D.createEvent("MouseEvent");
  var eventNames = {
    touchstart: "mousedown",
    touchmove: "mousemove",
    touchend: "mouseup"
  };
  var evt = eventNames[event.type];
  simulatedEvent.initMouseEvent(evt, true, true, W, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
  touch.target.dispatchEvent(simulatedEvent);
  event.preventDefault();
  event.stopPropagation();
  return false;
};

var doNothing = function doNothing(e) {
  e.preventDefault();
  return false;
};

var getPos = function getPos(e) {
  return parseInt(e.replace('%', ''));
};

var percentFromPixels = function percentFromPixels(direction, px) {
  return px / W["inner".concat(direction)] * 100;
};

var pixelsFromPercent = function pixelsFromPercent(direction, pc) {
  return pc * W["inner".concat(direction)] / 100;
};

var isOutOfBounds = function isOutOfBounds(e) {
  return e.clientX >= W.innerWidth || e.clientX <= 0 || e.clientY >= W.innerHeight || e.clientY <= 0;
};

var drag = function drag(evt) {
  dragged = evt.currentTarget.parentNode;
  cl.add(dragged, 'dragged');
  startPos = {
    left: pixelsFromPercent('Width', getPos(dragged.style.left)),
    top: pixelsFromPercent('Height', getPos(dragged.style.top))
  };
  currentZIndex += 1;
  dragged.style.zIndex = currentZIndex;
  dragged.offset = {
    left: evt.clientX - pixelsFromPercent('Width', getPos(dragged.style.left)),
    top: evt.clientY - pixelsFromPercent('Height', getPos(dragged.style.top))
  };
  dragged.style.opacity = 0.8;
  dragged.style.transition = null;
  on(D, 'mousemove', mousemove);
  on(D, 'mouseup', drop);
  on(D, 'mouseout', dropIfOutOfBounds);
};

var drop = function drop() {
  if (!dragged) {
    return;
  }

  forEach(draggables, function (draggable) {
    cl.rm(draggable, 'dragged');

    if (draggable === dragged) {
      cl.add(dragged, 'dropped');
    } else {
      cl.rm(draggable, 'dropped');
    }
  });
  dragged.style.opacity = 1;
  dragged.style.transition = 'left 500ms, top 500ms';
  dragged = false;
  startPos = false;
};

var dropIfOutOfBounds = function dropIfOutOfBounds(e) {
  if (isOutOfBounds(e)) {
    drop(e);
  }
};

var mousemove = function mousemove(evt) {
  if (dragged) {
    var max = {
      left: W.innerWidth - dragged.clientWidth,
      top: W.innerHeight - dragged.clientHeight
    };
    var newLeft = evt.clientX - dragged.offset.left;

    if (newLeft < 0) {
      newLeft = 0;
    } else if (newLeft > max.left) {
      newLeft = max.left;
    }

    dragged.style.left = "".concat(percentFromPixels('Width', newLeft), "%");
    var newTop = evt.clientY - dragged.offset.top;

    if (newTop < 0) {
      newTop = 0;
    } else if (newTop > max.top) {
      newTop = max.top;
    }

    dragged.style.top = "".concat(percentFromPixels('Height', newTop), "%");
  }
};

W.onload = function () {
  forEach(draggables, function (draggable) {
    var img = $('.bg', draggable)[0];

    if (img) {
      on(img, 'dragstart', doNothing);
      on(img, 'mousedown', drag);
      on(img, "touchstart", touchHandler, true);
      on(img, "touchmove", touchHandler, true);
      on(img, "touchend", touchHandler, true);
      on(img, "touchcancel", touchHandler, true);
      var parentStyle = img.parentNode.style;

      if (parentStyle && parentStyle.left === '100%' || parentStyle.left === '-100%') {
        img.dispatchEvent(new Event('load'));
      }
    }

    var a = $('a', draggable)[0];

    if (a) {
      on(a, 'touchend', function (e) {
        e.stopPropagation();
        return false;
      });
    }
  });
}; // Menu


var menuContainer = $('.nav')[0];

if (menuContainer) {
  var active = $('.active', menuContainer)[0];

  var toggleMenu = function toggleMenu(e) {
    e.preventDefault();
    cl.toggle(menuContainer, 'show');
    return false;
  };

  if (active) {
    on(active, 'click', toggleMenu);
  }
} // About page


var trigger = $('.about-page-trigger')[0];

if (trigger) {
  on(trigger, "click", function (evt) {
    evt.preventDefault();
    cl.toggle(document.body, "about-visible");
    return false;
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIkQiLCJkb2N1bWVudCIsIk0iLCJNYXRoIiwiVyIsIndpbmRvdyIsIiQiLCJzdHIiLCJwYXIiLCJpc0NsIiwiaW5kZXhPZiIsImlzSWQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwic3Vic3RyIiwibGVuZ3RoIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImRyYWdnYWJsZUNvbnRhaW5lciIsImRyYWdnYWJsZXMiLCJtYXhaSW5kZXgiLCJkcmFnZ2VkIiwic3RhcnRQb3MiLCJjdXJyZW50WkluZGV4IiwiZm9yRWFjaCIsIml0ZW1zIiwiZm4iLCJpIiwiaGFzT3duUHJvcGVydHkiLCJjbCIsImhhcyIsImUiLCJjIiwiY2xhc3NOYW1lIiwiYWRkIiwicm0iLCJyZXBsYWNlIiwidHJpbSIsInRvZ2dsZSIsIm9uIiwiZWxlIiwibGlzdGVuZXIiLCJjYiIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmxvYWQiLCJ0YXJnZXQiLCJ0YXIiLCJ3aWR0aCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImhlaWdodCIsImxlZnQiLCJ0b3AiLCJtYXhXaWR0aCIsImlubmVyV2lkdGgiLCJ3aWR0aFBlcmNlbnQiLCJtYXhIZWlnaHQiLCJpbm5lckhlaWdodCIsImhlaWdodFBlcmNlbnQiLCJtYXhMZWZ0IiwibWF4VG9wIiwicmFuZG9tIiwiZmxvb3IiLCJwZXJjZW50RnJvbVBpeGVscyIsInN0eWxlIiwidHJhbnNpdGlvbiIsImRyYWdnYWJsZSIsInJhbiIsInBvcyIsImltZyIsInRvdWNoSGFuZGxlciIsImV2ZW50IiwidG91Y2giLCJjaGFuZ2VkVG91Y2hlcyIsInNpbXVsYXRlZEV2ZW50IiwiY3JlYXRlRXZlbnQiLCJldmVudE5hbWVzIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwiZXZ0IiwidHlwZSIsImluaXRNb3VzZUV2ZW50Iiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsImRpc3BhdGNoRXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImRvTm90aGluZyIsImdldFBvcyIsInBhcnNlSW50IiwiZGlyZWN0aW9uIiwicHgiLCJwaXhlbHNGcm9tUGVyY2VudCIsInBjIiwiaXNPdXRPZkJvdW5kcyIsImRyYWciLCJjdXJyZW50VGFyZ2V0IiwicGFyZW50Tm9kZSIsInpJbmRleCIsIm9mZnNldCIsIm9wYWNpdHkiLCJtb3VzZW1vdmUiLCJkcm9wIiwiZHJvcElmT3V0T2ZCb3VuZHMiLCJtYXgiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIm5ld0xlZnQiLCJuZXdUb3AiLCJwYXJlbnRTdHlsZSIsIkV2ZW50IiwiYSIsIm1lbnVDb250YWluZXIiLCJhY3RpdmUiLCJ0b2dnbGVNZW51IiwidHJpZ2dlciIsImJvZHkiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLENBQUMsR0FBR0MsUUFBVjtBQUNBLElBQU1DLENBQUMsR0FBR0MsSUFBVjtBQUNBLElBQU1DLENBQUMsR0FBR0MsTUFBVjs7QUFFQSxJQUFNQyxDQUFDLEdBQUcsU0FBSkEsQ0FBSSxDQUFDQyxHQUFELEVBQWtCO0FBQUEsTUFBWkMsR0FBWSx1RUFBTlIsQ0FBTTtBQUMxQixNQUFNUyxJQUFJLEdBQUdGLEdBQUcsQ0FBQ0csT0FBSixDQUFZLEdBQVosTUFBcUIsQ0FBbEM7QUFDQSxNQUFNQyxJQUFJLEdBQUdKLEdBQUcsQ0FBQ0csT0FBSixDQUFZLEdBQVosTUFBcUIsQ0FBbEM7O0FBRUEsTUFBSUQsSUFBSixFQUFVO0FBQ1IsV0FBT0QsR0FBRyxDQUFDSSxzQkFBSixDQUEyQkwsR0FBRyxDQUFDTSxNQUFKLENBQVcsQ0FBWCxFQUFjTixHQUFHLENBQUNPLE1BQWxCLENBQTNCLENBQVA7QUFDRCxHQUZELE1BRU8sSUFBSUgsSUFBSixFQUFVO0FBQ2YsV0FBT0gsR0FBRyxDQUFDTyxjQUFKLENBQW1CUixHQUFHLENBQUNNLE1BQUosQ0FBVyxDQUFYLEVBQWNOLEdB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Q0FBZjs7QUFFQSxNQUFNRSxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFBckYsQ0FBQyxFQUFJO0FBQ3RCQSxJQUFBQSxDQUFDLENBQUN3RCxjQUFGO0FBQ0ExRCxJQUFBQSxFQUFFLENBQUNTLE1BQUgsQ0FBVTRFLGFBQVYsRUFBeUIsTUFBekI7QUFDQSxXQUFPLEtBQVA7QUFDRCxHQUpEOztBQU1BLE1BQUlDLE1BQUosRUFBWTtBQUNWNUUsSUFBQUEsRUFBRSxDQUFDNEUsTUFBRCxFQUFTLE9BQVQsRUFBa0JDLFVBQWxCLENBQUY7QUFDRDtBQUNGLEMsQ0FFRDs7O0FBRUEsSUFBSUMsT0FBTyxHQUFHOUcsQ0FBQyxDQUFDLHFCQUFELENBQUQsQ0FBeUIsQ0FBekIsQ0FBZDs7QUFFQSxJQUFJOEcsT0FBSixFQUFhO0FBQ1g5RSxFQUFBQSxFQUFFLENBQUM4RSxPQUFELEVBQVUsT0FBVixFQUFtQixVQUFVdEMsR0FBVixFQUFlO0FBQ2xDQSxJQUFBQSxHQUFHLENBQUNRLGNBQUo7QUFFQTFELElBQUFBLEVBQUUsQ0FBQ1MsTUFBSCxDQUFVcEMsUUFBUSxDQUFDb0gsSUFBbkIsRUFBeUIsZUFBekI7QUFFQSxXQUFPLEtBQVA7QUFDRCxHQU5DLENBQUY7QUFPRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEQgPSBkb2N1bWVudFxuY29uc3QgTSA9IE1hdGhcbmNvbnN0IFcgPSB3aW5kb3dcblxuY29uc3QgJCA9IChzdHIsIHBhciA9IEQpID0+IHtcbiAgY29uc3QgaXNDbCA9IHN0ci5pbmRleE9mKCcuJykgPT09IDBcbiAgY29uc3QgaXNJZCA9IHN0ci5pbmRleE9mKCcjJykgPT09IDBcblxuICBpZiAoaXNDbCkge1xuICAgIHJldHVybiBwYXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShzdHIuc3Vic3RyKDEsIHN0ci5sZW5ndGgpKVxuICB9IGVsc2UgaWYgKGlzSWQpIHtcbiAgICByZXR1cm4gcGFyLmdldEVsZW1lbnRCeUlkKHN0ci5zdWJzdHIoMSwgc3RyLmxlbmd0aCkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhci5nZXRFbGVtZW50c0J5VGFnTmFtZShzdHIpXG4gIH1cbn1cblxuLy8gZ2xvYmFsIGRvbSBlbGVtZW50c1xuY29uc3QgZHJhZ2dhYmxlQ29udGFpbmVyID0gJCgnLmRyYWdnYWJsZXMnKVswXVxuY29uc3QgZHJhZ2dhYmxlcyA9ICQoJy5kcmFnJylcbmNvbnN0IG1heFpJbmRleCA9IGRyYWdnYWJsZXMubGVuZ3RoICogNVxuXG4vLyBnbG9iYWwgYXBwIHN0YXRlXG5sZXQgZHJhZ2dlZCA9IGZhbHNlXG5sZXQgc3RhcnRQb3MgPSBmYWxzZVxubGV0IGN1cnJlbnRaSW5kZXggPSAxXG5cbi8vIGxvb3Agb3ZlciBlYWNoIGl0ZW0gYW5kIGNhbGwgZm4oaXRlbSlcbmNvbnN0IGZvckVhY2ggPSAoaXRlbXMsIGZuKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaXRlbXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIGZuKGl0ZW1zW2ldKVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBjbCA9IHtcbiAgaGFzKGUsIGMpIHtcbiAgICByZXR1cm4gZS5jbGFzc05hbWUgJiYgZS5jbGFzc05hbWUuaW5kZXhPZihjKSA+IC0xXG4gIH0sXG4gIGFkZChlLCBjKSB7XG4gICAgaWYgKCFjbC5oYXMoZSwgYykpIHtcbiAgICAgIGlmIChlLmNsYXNzTmFtZSkge1xuICAgICAgICBjID0gZS5jbGFzc05hbWUgKyAnICcgKyBjXG4gICAgICB9XG4gICAgICBlLmNsYXNzTmFtZSA9IGNcbiAgICB9XG4gIH0sXG4gIHJtKGUsIGMpIHtcbiAgICBpZiAoY2wuaGFzKGUsIGMpKSB7XG4gICAgICBlLmNsYXNzTmFtZSA9IGUuY2xhc3NOYW1lLnJlcGxhY2UoYywgJycpLnRyaW0oKVxuICAgIH1cbiAgfSxcbiAgdG9nZ2xlOiAoZSwgYykgPT4ge1xuICAgIGlmIChjbC5oYXMoZSwgYykpIHtcbiAgICAgIGNsLnJtKGUsIGMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNsLmFkZChlLCBjKVxuICAgIH1cbiAgfSxcbn1cblxuY29uc3Qgb24gPSAoZWxlLCBsaXN0ZW5lciwgY2IpID0+IHtcbiAgaWYgKGVsZSkge1xuICAgIGVsZS5hZGRFdmVudExpc3RlbmVyKGxpc3RlbmVyLCBjYilcbiAgfVxufVxuXG4vLyByZXNpemUgYW5kIHJlcG9zaXRpb24gYWZ0ZXIgbG9hZCBvZiBpbWFnZXNcbmNvbnN0IG9ubG9hZCA9IHBhciA9PiBlID0+IHtcbiAgaWYgKGNsLmhhcyhlLnRhcmdldCwgJ2JnJykpIHtcbiAgICBjb25zdCB0YXIgPSBlLnRhcmdldFxuICAgIGxldCB3aWR0aCA9IHRhci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aFxuICAgIGxldCBoZWlnaHQgPSB0YXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0XG4gICAgbGV0IGxlZnQgPSAwXG4gICAgbGV0IHRvcCA9IDBcblxuICAgIC8vIHJlc2l6ZSBpZiB0b28gd2lkZVxuICAgIGNvbnN0IG1heFdpZHRoID0gVy5pbm5lcldpZHRoICogLjdcbiAgICBpZiAod2lkdGggPiBtYXhXaWR0aCkge1xuICAgICAgY29uc3Qgd2lkdGhQZXJjZW50ID0gKHdpZHRoIC8gbWF4V2lkdGgpICsgLjFcbiAgICAgIHdpZHRoIC89IHdpZHRoUGVyY2VudFxuICAgICAgaGVpZ2h0IC89IHdpZHRoUGVyY2VudFxuICAgIH1cblxuICAgIC8vIHJlc2l6ZSBpZiB0b28gaGlnaFxuICAgIGNvbnN0IG1heEhlaWdodCA9IFcuaW5uZXJIZWlnaHQgKiAuN1xuICAgIGlmIChoZWlnaHQgPiBtYXhIZWlnaHQpIHtcbiAgICAgIGNvbnN0IGhlaWdodFBlcmNlbnQgPSAoaGVpZ2h0IC8gbWF4SGVpZ2h0KSArIC4xXG4gICAgICBoZWlnaHQgLz0gaGVpZ2h0UGVyY2VudFxuICAgICAgd2lkdGggLz0gaGVpZ2h0UGVyY2VudFxuICAgIH1cblxuICAgIGNvbnN0IG1heExlZnQgPSBXLmlubmVyV2lkdGggLSB3aWR0aFxuICAgIGNvbnN0IG1heFRvcCA9IFcuaW5uZXJIZWlnaHQgLSBoZWlnaHRcbiAgICBsZWZ0ID0gTS5yYW5kb20oKSAqIG1heExlZnRcbiAgICB0b3AgPSBNLnJhbmRvbSgpICogbWF4VG9wXG4gICAgbGVmdCA9IGAke00uZmxvb3IocGVyY2VudEZyb21QaXhlbHMoJ1dpZHRoJywgbGVmdCkpfSVgXG4gICAgdG9wID0gYCR7TS5mbG9vcihwZXJjZW50RnJvbVBpeGVscygnSGVpZ2h0JywgdG9wKSl9JWBcblxuICAgIHBhci5zdHlsZS5sZWZ0ID0gbGVmdFxuICAgIHBhci5zdHlsZS50b3AgPSB0b3BcbiAgICBwYXIuc3R5bGUudHJhbnNpdGlvbiA9ICdsZWZ0IDUwMG1zLCB0b3AgNTAwbXMnXG4gIH1cbn1cblxuZm9yRWFjaChkcmFnZ2FibGVzLCBkcmFnZ2FibGUgPT4ge1xuICBjb25zdCByYW4gPSBNLnJhbmRvbSgpXG4gIGNvbnN0IHBvcyA9IHtcbiAgICBsZWZ0OiAnMTAwJScsXG4gICAgdG9wOiAnMTAwJScsXG4gIH1cblxuICBpZiAocmFuID4gMC43KSB7XG4gICAgcG9zLmxlZnQgPSBgLSR7cG9zLmxlZnR9YFxuICB9IGVsc2UgaWYgKHJhbiA8IDAuMykge1xuICAgIHBvcy50b3AgPSBgLSR7cG9zLnRvcH1gXG4gIH1cblxuICBkcmFnZ2FibGUuc3R5bGUubGVmdCA9IHBvcy5sZWZ0XG4gIGRyYWdnYWJsZS5zdHlsZS50b3AgPSBwb3MudG9wXG5cbiAgY29uc3QgaW1nID0gJCgnLmJnJywgZHJhZ2dhYmxlKVswXVxuICBvbihpbWcsICdsb2FkJywgb25sb2FkKGRyYWdnYWJsZSkpXG59KVxuXG5jb25zdCB0b3VjaEhhbmRsZXIgPSAoZXZlbnQpID0+IHtcbiAgY29uc3QgdG91Y2ggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXVxuICBjb25zdCBzaW11bGF0ZWRFdmVudCA9IEQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50XCIpXG5cbiAgY29uc3QgZXZlbnROYW1lcyA9IHtcbiAgICB0b3VjaHN0YXJ0OiBcIm1vdXNlZG93blwiLFxuICAgIHRvdWNobW92ZTogXCJtb3VzZW1vdmVcIixcbiAgICB0b3VjaGVuZDogXCJtb3VzZXVwXCIsXG4gIH1cblxuICBjb25zdCBldnQgPSBldmVudE5hbWVzW2V2ZW50LnR5cGVdXG5cbiAgc2ltdWxhdGVkRXZlbnQuaW5pdE1vdXNlRXZlbnQoXG4gICAgZXZ0LCB0cnVlLCB0cnVlLCBXLCAxLFxuICAgIHRvdWNoLnNjcmVlblgsIHRvdWNoLnNjcmVlblksXG4gICAgdG91Y2guY2xpZW50WCwgdG91Y2guY2xpZW50WSxcbiAgICBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgbnVsbFxuICApXG5cbiAgdG91Y2gudGFyZ2V0LmRpc3BhdGNoRXZlbnQoc2ltdWxhdGVkRXZlbnQpXG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgcmV0dXJuIGZhbHNlXG59XG5cbmNvbnN0IGRvTm90aGluZyA9IChlKSA9PiB7XG4gIGUucHJldmVudERlZmF1bHQoKVxuICByZXR1cm4gZmFsc2Vcbn1cblxuY29uc3QgZ2V0UG9zID0gZSA9PiBwYXJzZUludChlLnJlcGxhY2UoJyUnLCAnJykpXG5cbmNvbnN0IHBlcmNlbnRGcm9tUGl4ZWxzID0gKGRpcmVjdGlvbiwgcHgpID0+IChweCAvIFdbYGlubmVyJHtkaXJlY3Rpb259YF0pICogMTAwXG5jb25zdCBwaXhlbHNGcm9tUGVyY2VudCA9IChkaXJlY3Rpb24sIHBjKSA9PiAocGMgKiBXW2Bpbm5lciR7ZGlyZWN0aW9ufWBdKSAvIDEwMFxuXG5jb25zdCBpc091dE9mQm91bmRzID0gZSA9PiAoXG4gIGUuY2xpZW50WCA+PSBXLmlubmVyV2lkdGggfHxcbiAgZS5jbGllbnRYIDw9IDAgfHxcbiAgZS5jbGllbnRZID49IFcuaW5uZXJIZWlnaHQgfHxcbiAgZS5jbGllbnRZIDw9IDBcbilcblxuY29uc3QgZHJhZyA9IGV2dCA9PiB7XG4gIGRyYWdnZWQgPSBldnQuY3VycmVudFRhcmdldC5wYXJlbnROb2RlXG5cbiAgY2wuYWRkKGRyYWdnZWQsICdkcmFnZ2VkJylcblxuICBzdGFydFBvcyA9IHtcbiAgICBsZWZ0OiBwaXhlbHNGcm9tUGVyY2VudCgnV2lkdGgnLCBnZXRQb3MoZHJhZ2dlZC5zdHlsZS5sZWZ0KSksXG4gICAgdG9wOiBwaXhlbHNGcm9tUGVyY2VudCgnSGVpZ2h0JywgZ2V0UG9zKGRyYWdnZWQuc3R5bGUudG9wKSksXG4gIH1cblxuICBjdXJyZW50WkluZGV4ICs9IDFcbiAgZHJhZ2dlZC5zdHlsZS56SW5kZXggPSBjdXJyZW50WkluZGV4XG4gIGRyYWdnZWQub2Zmc2V0ID0ge1xuICAgIGxlZnQ6IGV2dC5jbGllbnRYIC0gcGl4ZWxzRnJvbVBlcmNlbnQoJ1dpZHRoJywgZ2V0UG9zKGRyYWdnZWQuc3R5bGUubGVmdCkpLFxuICAgIHRvcDogZXZ0LmNsaWVudFkgLSBwaXhlbHNGcm9tUGVyY2VudCgnSGVpZ2h0JywgZ2V0UG9zKGRyYWdnZWQuc3R5bGUudG9wKSksXG4gIH1cbiAgZHJhZ2dlZC5zdHlsZS5vcGFjaXR5ID0gMC44XG5cbiAgZHJhZ2dlZC5zdHlsZS50cmFuc2l0aW9uID0gbnVsbFxuXG4gIG9uKEQsICdtb3VzZW1vdmUnLCBtb3VzZW1vdmUpXG4gIG9uKEQsICdtb3VzZXVwJywgZHJvcClcbiAgb24oRCwgJ21vdXNlb3V0JywgZHJvcElmT3V0T2ZCb3VuZHMpXG59XG5cbmNvbnN0IGRyb3AgPSAoKSA9PiB7XG4gIGlmICghZHJhZ2dlZCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgZm9yRWFjaChkcmFnZ2FibGVzLCBkcmFnZ2FibGUgPT4ge1xuICAgIGNsLnJtKGRyYWdnYWJsZSwgJ2RyYWdnZWQnKVxuXG4gICAgaWYgKGRyYWdnYWJsZSA9PT0gZHJhZ2dlZCkge1xuICAgICAgY2wuYWRkKGRyYWdnZWQsICdkcm9wcGVkJylcbiAgICB9IGVsc2Uge1xuICAgICAgY2wucm0oZHJhZ2dhYmxlLCAnZHJvcHBlZCcpXG4gICAgfVxuICB9KVxuXG4gIGRyYWdnZWQuc3R5bGUub3BhY2l0eSA9IDFcbiAgZHJhZ2dlZC5zdHlsZS50cmFuc2l0aW9uID0gJ2xlZnQgNTAwbXMsIHRvcCA1MDBtcydcblxuICBkcmFnZ2VkID0gZmFsc2VcbiAgc3RhcnRQb3MgPSBmYWxzZVxufVxuXG5jb25zdCBkcm9wSWZPdXRPZkJvdW5kcyA9IGUgPT4ge1xuICBpZiAoaXNPdXRPZkJvdW5kcyhlKSkge1xuICAgIGRyb3AoZSlcbiAgfVxufVxuXG5jb25zdCBtb3VzZW1vdmUgPSBldnQgPT4ge1xuICBpZiAoZHJhZ2dlZCkge1xuICAgIGNvbnN0IG1heCA9IHtcbiAgICAgIGxlZnQ6IFcuaW5uZXJXaWR0aCAtIGRyYWdnZWQuY2xpZW50V2lkdGgsXG4gICAgICB0b3A6IFcuaW5uZXJIZWlnaHQgLSBkcmFnZ2VkLmNsaWVudEhlaWdodCxcbiAgICB9XG5cbiAgICBsZXQgbmV3TGVmdCA9IGV2dC5jbGllbnRYIC0gZHJhZ2dlZC5vZmZzZXQubGVmdFxuICAgIGlmIChuZXdMZWZ0IDwgMCkge1xuICAgICAgbmV3TGVmdCA9IDBcbiAgICB9IGVsc2UgaWYgKG5ld0xlZnQgPiBtYXgubGVmdCkge1xuICAgICAgbmV3TGVmdCA9IG1heC5sZWZ0XG4gICAgfVxuXG4gICAgZHJhZ2dlZC5zdHlsZS5sZWZ0ID0gYCR7cGVyY2VudEZyb21QaXhlbHMoJ1dpZHRoJywgbmV3TGVmdCl9JWBcblxuICAgIGxldCBuZXdUb3AgPSBldnQuY2xpZW50WSAtIGRyYWdnZWQub2Zmc2V0LnRvcFxuICAgIGlmIChuZXdUb3AgPCAwKSB7XG4gICAgICBuZXdUb3AgPSAwXG4gICAgfSBlbHNlIGlmIChuZXdUb3AgPiBtYXgudG9wKSB7XG4gICAgICBuZXdUb3AgPSBtYXgudG9wXG4gICAgfVxuICAgIGRyYWdnZWQuc3R5bGUudG9wID0gYCR7cGVyY2VudEZyb21QaXhlbHMoJ0hlaWdodCcsIG5ld1RvcCl9JWBcbiAgfVxufVxuXG5XLm9ubG9hZCA9ICgpID0+IHtcbiAgZm9yRWFjaChkcmFnZ2FibGVzLCBkcmFnZ2FibGUgPT4ge1xuICAgIGNvbnN0IGltZyA9ICQoJy5iZycsIGRyYWdnYWJsZSlbMF1cbiAgICBpZiAoaW1nKSB7XG4gICAgICBvbihpbWcsICdkcmFnc3RhcnQnLCBkb05vdGhpbmcpXG4gICAgICBvbihpbWcsICdtb3VzZWRvd24nLCBkcmFnKVxuXG4gICAgICBvbihpbWcsIFwidG91Y2hzdGFydFwiLCB0b3VjaEhhbmRsZXIsIHRydWUpXG4gICAgICBvbihpbWcsIFwidG91Y2htb3ZlXCIsIHRvdWNoSGFuZGxlciwgdHJ1ZSlcbiAgICAgIG9uKGltZywgXCJ0b3VjaGVuZFwiLCB0b3VjaEhhbmRsZXIsIHRydWUpXG4gICAgICBvbihpbWcsIFwidG91Y2hjYW5jZWxcIiwgdG91Y2hIYW5kbGVyLCB0cnVlKVxuXG4gICAgICBjb25zdCBwYXJlbnRTdHlsZSA9IGltZy5wYXJlbnROb2RlLnN0eWxlXG4gICAgICBpZiAocGFyZW50U3R5bGUgJiYgcGFyZW50U3R5bGUubGVmdCA9PT0gJzEwMCUnIHx8IHBhcmVudFN0eWxlLmxlZnQgPT09ICctMTAwJScpIHtcbiAgICAgICAgaW1nLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdsb2FkJykpXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgYSA9ICQoJ2EnLCBkcmFnZ2FibGUpWzBdXG4gICAgaWYgKGEpIHtcbiAgICAgIG9uKGEsICd0b3VjaGVuZCcsIGUgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfSlcbiAgICB9XG4gIH0pXG59XG5cbi8vIE1lbnVcbmNvbnN0IG1lbnVDb250YWluZXIgPSAkKCcubmF2JylbMF1cbmlmIChtZW51Q29udGFpbmVyKSB7XG4gIGNvbnN0IGFjdGl2ZSA9ICQoJy5hY3RpdmUnLCBtZW51Q29udGFpbmVyKVswXVxuXG4gIGNvbnN0IHRvZ2dsZU1lbnUgPSBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBjbC50b2dnbGUobWVudUNvbnRhaW5lciwgJ3Nob3cnKVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgaWYgKGFjdGl2ZSkge1xuICAgIG9uKGFjdGl2ZSwgJ2NsaWNrJywgdG9nZ2xlTWVudSlcbiAgfVxufVxuXG4vLyBBYm91dCBwYWdlXG5cbnZhciB0cmlnZ2VyID0gJCgnLmFib3V0LXBhZ2UtdHJpZ2dlcicpWzBdXG5cbmlmICh0cmlnZ2VyKSB7XG4gIG9uKHRyaWdnZXIsIFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2dCkge1xuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY2wudG9nZ2xlKGRvY3VtZW50LmJvZHksIFwiYWJvdXQtdmlzaWJsZVwiKVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH0pXG59XG4iXX0=