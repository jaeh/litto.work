var D = document;
var M = Math;
var W = window;

var $ = function $(str) {
  var par = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : D;
  var isCl = str.indexOf('.') === 0;
  var isId = str.indexOf('#') === 0;

  if (isCl) {
    return par.getElementsByClassName(str.substr(1, str.length));
  } else if (isId) {
    return par.getElementById(str.substr(1, str.length));
  } else {
    return par.getElementsByTagName(str);
  }
}; // global dom elements


var draggableContainer = $('.draggables')[0];
var draggables = $('.drag');
var maxZIndex = draggables.length * 5; // global app state

var dragged = false;
var startPos = false;
var currentZIndex = 1; // loop over each item and call fn(item)

var forEach = function forEach(items, fn) {
  for (var i = 0; i < items.length; i++) {
    if (items.hasOwnProperty(i)) {
      fn(items[i]);
    }
  }
};

var cl = {
  has: function has(e, c) {
    return e.className && e.className.indexOf(c) > -1;
  },
  add: function add(e, c) {
    if (!cl.has(e, c)) {
      if (e.className) {
        c = e.className + ' ' + c;
      }

      e.className = c;
    }
  },
  rm: function rm(e, c) {
    if (cl.has(e, c)) {
      e.className = e.className.replace(c, '').trim();
    }
  },
  toggle: function toggle(e, c) {
    if (cl.has(e, c)) {
      cl.rm(e, c);
    } else {
      cl.add(e, c);
    }
  } // resize and reposition after load of images

};

var onload = function onload(par) {
  return function (e) {
    if (cl.has(e.target, 'bg')) {
      var tar = e.target;
      var width = tar.naturalWidth;
      var height = tar.naturalHeight;
      var left = 0;
      var top = 0; // resize if too wide

      var maxWidth = W.innerWidth * .7;

      if (width > maxWidth) {
        var widthPercent = width / maxWidth + .1;
        width /= widthPercent;
        height /= widthPercent;
      } // resize if too high


      var maxHeight = W.innerHeight * .7;

      if (height > maxHeight) {
        var heightPercent = height / maxHeight + .1;
        height /= heightPercent;
        width /= heightPercent;
      }

      var maxLeft = W.innerWidth - width;
      var maxTop = W.innerHeight - height;
      left = M.random() * maxLeft;
      top = M.random() * maxTop;
      left = "".concat(M.floor(percentFromPixels('Width', left)), "%");
      top = "".concat(M.floor(percentFromPixels('Height', top)), "%");
      par.style.left = left;
      par.style.top = top;
      par.style.transition = 'left 500ms, top 500ms';
    }
  };
};

forEach(draggables, function (draggable) {
  var ran = M.random();
  var pos = {
    left: '100%',
    top: '100%'
  };

  if (ran > 0.7) {
    pos.left = "-".concat(pos.left);
  } else if (ran < 0.3) {
    pos.top = "-".concat(pos.top);
  }

  draggable.style.left = pos.left;
  draggable.style.top = pos.top;
  var img = $('.bg', draggable)[0];

  if (img) {
    img.addEventListener('load', onload(draggable));
  }
});

var touchHandler = function touchHandler(event) {
  var touch = event.changedTouches[0];
  var simulatedEvent = D.createEvent("MouseEvent");
  var eventNames = {
    touchstart: "mousedown",
    touchmove: "mousemove",
    touchend: "mouseup"
  };
  var evt = eventNames[event.type];
  simulatedEvent.initMouseEvent(evt, true, true, W, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
  touch.target.dispatchEvent(simulatedEvent);
  event.preventDefault();
  event.stopPropagation();
  return false;
};

var doNothing = function doNothing(e) {
  e.preventDefault();
  return false;
};

var getPos = function getPos(e) {
  return parseInt(e.replace('%', ''));
};

var percentFromPixels = function percentFromPixels(direction, px) {
  return px / W["inner".concat(direction)] * 100;
};

var pixelsFromPercent = function pixelsFromPercent(direction, pc) {
  return pc * W["inner".concat(direction)] / 100;
};

var isOutOfBounds = function isOutOfBounds(e) {
  return e.clientX >= W.innerWidth || e.clientX <= 0 || e.clientY >= W.innerHeight || e.clientY <= 0;
};

var drag = function drag(evt) {
  dragged = evt.currentTarget.parentNode;
  cl.add(dragged, 'dragged');
  startPos = {
    left: pixelsFromPercent('Width', getPos(dragged.style.left)),
    top: pixelsFromPercent('Height', getPos(dragged.style.top))
  };
  currentZIndex += 1;
  dragged.style.zIndex = currentZIndex;
  dragged.offset = {
    left: evt.clientX - pixelsFromPercent('Width', getPos(dragged.style.left)),
    top: evt.clientY - pixelsFromPercent('Height', getPos(dragged.style.top))
  };
  dragged.style.opacity = 0.8;
  dragged.style.transition = null;
  D.addEventListener('mousemove', mousemove);
  D.addEventListener('mouseup', drop);
  D.addEventListener('mouseout', dropIfOutOfBounds);
};

var drop = function drop() {
  if (!dragged) {
    return;
  }

  forEach(draggables, function (draggable) {
    cl.rm(draggable, 'dragged');

    if (draggable === dragged) {
      cl.add(dragged, 'dropped');
    } else {
      cl.rm(draggable, 'dropped');
    }
  });
  dragged.style.opacity = 1;
  dragged.style.transition = 'left 500ms, top 500ms';
  dragged = false;
  startPos = false;
};

var dropIfOutOfBounds = function dropIfOutOfBounds(e) {
  if (isOutOfBounds(e)) {
    drop(e);
  }
};

var mousemove = function mousemove(evt) {
  if (dragged) {
    var max = {
      left: W.innerWidth - dragged.clientWidth,
      top: W.innerHeight - dragged.clientHeight
    };
    var newLeft = evt.clientX - dragged.offset.left;

    if (newLeft < 0) {
      newLeft = 0;
    } else if (newLeft > max.left) {
      newLeft = max.left;
    }

    dragged.style.left = "".concat(percentFromPixels('Width', newLeft), "%");
    var newTop = evt.clientY - dragged.offset.top;

    if (newTop < 0) {
      newTop = 0;
    } else if (newTop > max.top) {
      newTop = max.top;
    }

    dragged.style.top = "".concat(percentFromPixels('Height', newTop), "%");
  }
};

W.onload = function () {
  forEach(draggables, function (draggable) {
    var img = $('.bg', draggable)[0];

    if (img) {
      img.addEventListener('dragstart', doNothing);
      img.addEventListener('mousedown', drag);
      img.addEventListener("touchstart", touchHandler, true);
      img.addEventListener("touchmove", touchHandler, true);
      img.addEventListener("touchend", touchHandler, true);
      img.addEventListener("touchcancel", touchHandler, true);
      var parentStyle = img.parentNode.style;

      if (parentStyle && parentStyle.left === '100%' || parentStyle.left === '-100%') {
        img.dispatchEvent(new Event('load'));
      }
    }

    var a = $('a', draggable)[0];

    if (a) {
      a.addEventListener('touchend', function (e) {
        e.stopPropagation();
        return false;
      });
    }
  });
}; // Menu


var menuContainer = $('.nav')[0];

if (menuContainer) {
  var active = $('.active', menuContainer)[0];

  var toggleMenu = function toggleMenu(e) {
    e.preventDefault();
    cl.toggle(menuContainer, 'show');
    return false;
  };

  if (active) {
    active.addEventListener('click', toggleMenu);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,